#include "string.hpp"
#include <iostream>

String::String(){
   str[0] = '\0';
}

String::String(char c){
  str[0] = c;
  str[1] = '\0';
}                

String::String(const char charArray[]){
  int i=0;
  while(charArray[i] != '\0'){
    str[i] = charArray[i];
    ++i;
  }
  str[i] = '\0';
}   

char& String::operator[](int i){
  if(i < 0)
    i = 0;
  return str[i];
}

char String::operator[](int i) const{
  return str[i];
}

int String:: capacity() const{
  return STRING_SIZE - 1;
}

int String::length() const{
  int i=0;
  while(str[i] != '\0')
    ++i;
  return i;
}

String String::operator+(const String& rhs)  const{
  String result(this->length()+rhs.length()+1);
  for (int j=0; j<length(); ++j){
    result.str[j]=str[j];
  }
  int len=length();
  int i=0;
  while((rhs.str[i]!=0) && (i + len < rhs.length()+length())){
    result.str[len+i]=rhs.str[i];
    ++i;
  }
  result.str[len +i]=0;
  return result;
}

String& String::operator+=(const String& rhs){
  int os = length();
  int i = 0;
  int capacity = STRING_SIZE;
    
  while(rhs.str[i] != 0){
    if(os + i == capacity)
      break;
    str[os + i] = rhs.str[i];
    ++i;
  }
  str[os + i] = 0;
  return *(this);
}

bool String::operator==(const String& rhs)  const{
  if (length() == rhs.length()) {
    for (int i=0; str[i] != '\0' && rhs[i] != '\0'; ++i) {
      if (str[i] != rhs[i])
	return false;
    }
    return true;
  }
  return false;
}

bool String::operator<(const String& rhs) const{
  int i = 0;
  while(str[i] != 0 && rhs.str[i] != 0 && str[i] == rhs.str[i])
    ++i;
  return str[i] < rhs.str[i];
}

String String::substr(int left, int right) const{
  if(right < 0)
    right = length();
  if(left < 0)
    left = 0;
  if(left == right)
    return String(str[left]);
  if (left == 0) {
    String result(right + 1);
    for(int i = 0; i <= right; ++i)
      result.str[i] = str[i];
    return result;
  }
  if(right == 0) {
    String result = str[left];
    return String("");
  }
  int size = (right - left) + 1;
  if(right == length())
    size = (right - left);
  if((right - left) == 1){
    String temp(size + 1);
    temp[0] = str[left];
    temp[1] = str[right];
    temp[2] = 0;
    return temp;
  }
  else if(right - left == 3) {
    String temp(size + 1);
    for(int i = left; i <= right; ++i){
      temp.str[i - left] = str[i];
    }
    return temp;
  }
    
  else if(right - left == 4) {
    String temp(size + 1);
    for(int i = left; i <= right; ++i){
      temp.str[i - left] = str[i];
    }
    return temp;
  }
  else {
    String temp(size);
    for(int i = left; i <= right; ++i){
      temp.str[i - left] = str[i]; 
    }
return temp;
  }
}

int String::findch(int start, const char ch) const{
  int i = start;
  while ((i <= length()) && (ch != str[i]))
    ++i;
  if(i > length())
    return -1;
  else
    return i;
}

int String::findstr(int pos,  const String& rhs) const{
  int fnd = -1;
  if(pos == 0 && str[0] == rhs[0]){
    fnd = 0;
    for(int j = 0; j < rhs.length(); ++j){
      if(str[fnd + j] != rhs[j])
	fnd = -1;
      else
	fnd = 0;
    }
    return fnd;
}
}

std::istream& operator>>(std::istream& in, String& rhs){
    int size = 0;
    char c[size];
    if(!in.eof()){
      in >> c;
      rhs = String(c);
      ++size;
    }
    else{
      rhs = String();
      ++size;
    }
    return in;
  }

 std::ostream& operator<<(std::ostream& out, const String& rhs){
   int i = 0; 
   while(rhs[i] != 0){
     out << rhs.str[i];
     ++i;
   }
   return out;
 }

 String operator+(const char lhs[],  const String& rhs){
   return String(lhs) + rhs;
 }
 
 String operator+(char lhs, const String& rhs){
   return String(lhs) + rhs;
 }

 bool operator==(const char lhs[],  const String& rhs){
   return String(lhs) == rhs;
 }

 bool operator==(char lhs, const String& rhs){
   return String(lhs) == rhs;
 }

 bool operator<(const char lhs[],  const String& rhs){
   if(String(lhs) < rhs)
     return true;
   else
     return false;
 }

 bool operator<(char c, const String& rhs){
   if(String(c) < rhs)
     return true;
   else
     return false;
 }

 bool operator<=(const String& lhs, const String& rhs){
   if(((lhs < rhs) || (lhs == rhs)) && !(lhs > rhs))
     return true;
   else
     return false;
 }

 bool operator!=(const String& lhs, const String& rhs){
   if((lhs > rhs) || (lhs < rhs))
     return true;
   else
     return false;
 }

 bool operator>=(const String& lhs, const String& rhs){
   if(((lhs > rhs) || (lhs == rhs)) && !(lhs < rhs))
     return true;
   else
     return false;
 }

 bool operator>(const String& lhs, const String& rhs){
   if(!(lhs < rhs) && !(lhs == rhs))
     return true;
   else
     return false;
 }
