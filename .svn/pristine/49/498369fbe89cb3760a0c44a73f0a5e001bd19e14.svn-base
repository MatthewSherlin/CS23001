#ifndef CS2_STACK_HPP_
#define CS2_STACK_HPP_
////////////////////////////////////////////////////////////////////////////
//
// File: stack.hpp
//
// Programmer: Matthew Sherlin
// Updated:    10/2019
//
//
// Do not change the names of the classes or methods.  Otherwise, instructor
//  tests will not work.
//

#include <new>
#include <iostream>
#include <cassert>
////////////////////////////////////////////////////////////////////////////
//           
template<typename T> 
class Node {
public:
  T data;
  Node<T>* next;
  Node(): data(), next(0) {};
  Node(const T& elem): data(elem), next(0){};

};


////////////////////////////////////////////////////////////////////////////
// CLASS INV:
//
//    
template <typename T>
class stack {
public:
 stack(){tos = 0;}
              stack     (const stack<T>&);
  ~stack    (){
    Node<T>* tmp;
    while(tos != 0){
      tmp = tos;
      tos = tos->next;
      delete tmp;
    }
  }
    void      swap      (stack<T>&);
    stack<T>& operator= (stack<T>);
	bool      empty     () const;
	bool      full      () const;
  T         top       () const;
	T         pop       ();
	void      push      (const T&);

private:
	Node<T>   *tos;
};

////////////////////////////////////////////////////////////////////////
// Functions:
//
//

template <typename T>
void stack<T>::swap(stack<T>& rhs){
  Node<T>* tmp = tos;
  tos = rhs.tos;
  rhs.tos = tmp;
};


template <typename T>
stack<T>& stack<T>::operator= (stack<T> rhs){
  swap(rhs);
  return *this;
};


template <typename T>
bool stack<T>::empty() const{
  if(tos == 0)
    return true;
  else
    return false;
};


template <typename T>
bool stack<T>::full() const{
  Node<T>* tmp = new Node<T>();
  if(tmp == 0)
    return true;
  delete tmp;
  return false;
};


template <typename T>
stack<T>::stack(const stack<T>& rhs){
  Node<T> *tmp = rhs.tos;
  Node<T> *tmp2;
  tos=0;
  while(tmp != 0){
    if(tos == 0){
      tos = new Node<T>(tmp->data);
      tmp2 = tos;
    }
    else{
      tmp2->next = new Node<T>(tmp->data);
      tmp2 = tmp2->next;
    }
    tmp = tmp->next;
  }
};


template <typename T>
T stack<T>::top() const{
  assert(!empty());
  return tos->data;
};

template <typename T>
T stack<T>::pop(){
  T final = tos -> data;
  Node<T>* tmp = tos;
  tos = tos->next;
  delete tmp;
  return final;
};


template <typename T>
void stack<T>::push(const T& newNode){
  Node<T> *tmp = new Node<T>(newNode);
  tmp->next = tos;
  tos = tmp;
};





#endif

